/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * mainJFrame.java
 *
 */

package webcurve.ui;

import java.awt.Dimension;
import java.awt.Toolkit;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.Map;
import javax.swing.table.DefaultTableModel;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import webcurve.client.MarketDepth;
import webcurve.client.MarketTrade;
import webcurve.common.ExchangeListener;
import webcurve.fix.ExchangeFixAgent;

/**
 * @author dennis_dun_chen@yahoo.com
 */
public class MarketDepthJFrame extends javax.swing.JFrame {
	 /**
	 * 
	 */
	private static final long serialVersionUID = 1L;

	static Logger log = LoggerFactory.getLogger(MarketDepthJFrame.class);

    // user code

	ExchangeFixAgent fixAgent = new ExchangeFixAgent();
	private MarketDepth marketDepth;
	private ArrayList<MarketTrade> marketTrades;
	Map<String, MarketDepth> marketDepthMap = Collections.synchronizedMap(new HashMap<String, MarketDepth>());
	Map<String, ArrayList<MarketTrade>> marketTradeMap = Collections.synchronizedMap(new HashMap<String, ArrayList<MarketTrade>>());
    private String cfgFile;
    
    /** Creates new form mainJFrame */
    public MarketDepthJFrame(String cfgFile) {
    	this.cfgFile = cfgFile;
        initComponents();
        myInitComponents();
        updateBookView();
    }


    private void myInitComponents()
    {

        // set frame size and location
    	this.setTitle("Webcurve Simulator - Copyright (c) 2001-2005 to Dennis_d_Chen@yahoo.com");
        setSize(700, 500);
        Dimension dim = Toolkit.getDefaultToolkit().getScreenSize();
        setLocation((dim.width-700)/2, (dim.height-500)/2);
        fixAgent.Open(cfgFile);
        if(!cbStock.getSelectedItem().toString().equals(""))
            setBook(cbStock.getSelectedItem().toString());

        updateBookView();
    }


    public void setBook(String code)
    {
    
    	marketDepth = marketDepthMap.get(code);
    	if (null == marketDepth)
    	{
    		marketDepth = new MarketDepth();
    		marketDepth.setSymbol(code);
    		marketDepthMap.put(code, marketDepth);
    		fixAgent.subscribeMarketData(code, marketDepthListener, marketTradeListener);
    	}
    	
    	marketTrades = marketTradeMap.get(code);
     }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        jSplitPane2 = new javax.swing.JSplitPane();
        jSplitPane1 = new javax.swing.JSplitPane();
        jScrollPane1 = new javax.swing.JScrollPane();
        lstBid = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        lstAsk = new javax.swing.JTable();
        jScrollPane3 = new javax.swing.JScrollPane();
        lstTrade = new javax.swing.JTable();
        jPanel3 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        lbExchange = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        lbVWAP = new javax.swing.JLabel();
        cbStock = new javax.swing.JComboBox();
        cbExchange = new javax.swing.JComboBox();
        tbInstance = new javax.swing.JTextField();
        btBook = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenu2 = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setName("frMain"); // NOI18N
        getContentPane().setLayout(new java.awt.CardLayout());

        jPanel1.setLayout(new java.awt.BorderLayout());

        jPanel4.setLayout(new java.awt.BorderLayout());

        jSplitPane2.setDividerLocation(500);

        jSplitPane1.setDividerLocation(250);

        lstBid.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Broker", "Volume", "Price"
            }
        ) {
            /**
			 * 
			 */
			private static final long serialVersionUID = 1L;
			boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(lstBid);

        jSplitPane1.setLeftComponent(jScrollPane1);

        lstAsk.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Price", "Volume", "Broker"
            }
        ) {
            /**
			 * 
			 */
			private static final long serialVersionUID = 1L;
			boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(lstAsk);

        jSplitPane1.setRightComponent(jScrollPane2);

        jSplitPane2.setLeftComponent(jSplitPane1);

        lstTrade.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Trade Price", "Volume"
            }
        ));
        jScrollPane3.setViewportView(lstTrade);

        jSplitPane2.setRightComponent(jScrollPane3);

        jPanel4.add(jSplitPane2, java.awt.BorderLayout.CENTER);

        jPanel1.add(jPanel4, java.awt.BorderLayout.CENTER);

        jPanel3.setLayout(new java.awt.GridLayout(2, 0));

        jLabel3.setText("Stock:");
        jPanel3.add(jLabel3);

        lbExchange.setText("Exchange:");
        jPanel3.add(lbExchange);

        jLabel2.setText("Instance:");
        jPanel3.add(jLabel2);

        lbVWAP.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        lbVWAP.setText("VWAP:");
        jPanel3.add(lbVWAP);

        cbStock.setEditable(true);
        cbStock.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "0005.HK", "0011.HK", "0857.HK", "3968.HK", "1398.HK", "BHP.AX", "CBA.AX", "ANZ.AX", "WOW.AX" }));
        cbStock.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbStockActionPerformed(evt);
            }
        });
        jPanel3.add(cbStock);

        cbExchange.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "HKEX", "ASX", "TWSE", "KRX", "SGX", "JSX" }));
        cbExchange.addHierarchyBoundsListener(new java.awt.event.HierarchyBoundsListener() {
            public void ancestorMoved(java.awt.event.HierarchyEvent evt) {
                cbExchangeAncestorMoved(evt);
            }
            public void ancestorResized(java.awt.event.HierarchyEvent evt) {
            }
        });
        jPanel3.add(cbExchange);

        tbInstance.setText("0");
        jPanel3.add(tbInstance);

        btBook.setText("Detail");
        jPanel3.add(btBook);

        jPanel1.add(jPanel3, java.awt.BorderLayout.PAGE_START);

        jTabbedPane1.addTab("Order Book", jPanel1);

        getContentPane().add(jTabbedPane1, "card2");
        jTabbedPane1.getAccessibleContext().setAccessibleName("orderBookTab");

        jMenu1.setText("File");
        jMenuBar1.add(jMenu1);

        jMenu2.setText("Command");
        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void cbExchangeAncestorMoved(java.awt.event.HierarchyEvent evt) {//GEN-FIRST:event_cbExchangeAncestorMoved
}//GEN-LAST:event_cbExchangeAncestorMoved

    private void updateBookView()
    {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
            	if (marketDepth == null)
            		return;
            	ArrayList<Double> bids = marketDepth.getBids();
            	ArrayList<Long> bidVols = marketDepth.getBidVols();
		        //lstBid.removeAll();
		        DefaultTableModel model = (DefaultTableModel)lstBid.getModel();
		        model.setRowCount(0);
		        for (int i=0; i<bids.size(); i++)
		        {
		            Double price = bids.get(i);
		            Long qty = bidVols.get(i);
		            model.addRow( new Object[]{"",
		                                       qty,
		                                       price
		                });
		        }
		
            	ArrayList<Double> asks = marketDepth.getAsks();
            	ArrayList<Long> askVols = marketDepth.getAskVols();
		        
		        model = (DefaultTableModel)lstAsk.getModel();
		        model.setRowCount(0);
		        for (int i=0; i<asks.size(); i++)
		        {
		            Double price = asks.get(i);
		            Long qty = askVols.get(i);
		            model.addRow( new Object[]{price,
		                                       qty,
		                                       ""
		                });
		        }
		
		        model = (DefaultTableModel)lstTrade.getModel();
		        model.setRowCount(0);
		        if (marketTrades == null)
		        	return;
		        for (int i=0; i<marketTrades.size(); i++)
		        {
		            model.addRow( new Object[]{marketTrades.get(i).getPrice(), marketTrades.get(i).getVol()});
		        }
		
		        //VWAP
		        //lbVWAP.setText("VWAP: " + new DecimalFormat("###,###.###").format(currentBook.getVWAP().doubleValue()));
            }
        });
    }

    private void cbStockActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbStockActionPerformed
        setBook(cbStock.getSelectedItem().toString());
        updateBookView();
    }//GEN-LAST:event_cbStockActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btBook;
    private javax.swing.JComboBox cbExchange;
    private javax.swing.JComboBox cbStock;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JSplitPane jSplitPane2;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JLabel lbExchange;
    private javax.swing.JLabel lbVWAP;
    private javax.swing.JTable lstAsk;
    private javax.swing.JTable lstBid;
    private javax.swing.JTable lstTrade;
    private javax.swing.JTextField tbInstance;
    // End of variables declaration//GEN-END:variables


    ExchangeListener<MarketDepth> marketDepthListener = new ExchangeListener<MarketDepth>()
    {

		@Override
		public void onChangeEvent(MarketDepth t) {
			log.info("received MarketDepth: ");
			t.print();
			marketDepthMap.put(t.getSymbol(), t);
			if (marketDepth != null && t.getSymbol().equals(marketDepth.getSymbol()))
			{
				log.info("setting current MarketDepth: ");
				marketDepth = t;
				updateBookView();
			}
				
		}
    	
    };
    
    ExchangeListener<MarketTrade> marketTradeListener = new ExchangeListener<MarketTrade>()
    {

		@Override
		public void onChangeEvent(MarketTrade t) {
			log.info("received MarketTrade: " + t.getSymbol() + " " + t.getVol() + "@" + t.getPrice());
			
			ArrayList<MarketTrade> marketTrades = marketTradeMap.get(t.getSymbol());
			if (null == marketTrades)
			{
				marketTrades = new ArrayList<MarketTrade>();
				marketTradeMap.put(t.getSymbol(), marketTrades);
			}
			marketTrades.add(t);
			if (marketDepth != null && t.getSymbol().equals(marketDepth.getSymbol()))
			{
		
				MarketDepthJFrame.this.marketTrades = marketTrades;
				updateBookView();
			}
			
			
		}
    	
    };

	public static void main(String[] args) {
	    String cfgFile = "mdclient.cfg";
        if (args.length>0)
        	cfgFile = args[0];

    	class RunIt implements Runnable {
    		private String cfgFile;
    		public RunIt (String cfgFile) 
    		{
    			this.cfgFile = cfgFile;
    		}
            public void run() {
                new MarketDepthJFrame(cfgFile).setVisible(true);
            }
        };
        java.awt.EventQueue.invokeLater(new RunIt(cfgFile));

	}

}
